package com.example.feature_currentweather.presentation.presentation

import android.annotation.SuppressLint
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import coil.compose.AsyncImage
import com.example.core.serveice.models.CurrentWeather
import com.example.core.utils.NetworkUtils
import com.example.core.utils.WeatherFormatter
import com.example.feature_currentweather.R
import com.google.accompanist.swiperefresh.SwipeRefresh
import com.google.accompanist.swiperefresh.rememberSwipeRefreshState

/**
 * Main composable for displaying the current weather screen with swipe-to-refresh support.
 */
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun CurrentWeatherScreen(
    city: String,
    navController: NavController,
    viewModel: CurrentWeatherViewModel = hiltViewModel()
) {
    val state by viewModel.state.collectAsState()
    val isConnected by NetworkUtils.isConnected.collectAsState()
    val swipeRefreshState = rememberSwipeRefreshState(isRefreshing = state.isLoading)

    LaunchedEffect(isConnected, state.error) {
        if (isConnected && state.weather == null && !state.isLoading) {
            viewModel.loadWeather(city)
        }
        state.error?.let {
            viewModel.showError("Check your internet connection")
        }
    }

    Scaffold(
        snackbarHost = { SnackbarHost(viewModel.snackbarHostState) }
    ) { innerPadding ->
        SwipeRefresh(
            state = swipeRefreshState,
            onRefresh = {
                viewModel.loadWeather(city)
            },
            modifier = Modifier.padding(innerPadding)
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(Dimens.PaddingMedium),
                contentAlignment = Alignment.TopCenter
            ) {
                when {
                    state.isLoading && state.weather == null -> LoadingIndicator()
                    state.error != null -> ErrorMessage(
                        message = state.error ?: "Unknown error",
                        onRetry = { viewModel.loadWeather(city) }
                    )
                    state.weather != null -> {
                        val weather = state.weather
                        Column(
                            modifier = Modifier
                                .fillMaxSize()
                                .verticalScroll(rememberScrollState()),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(bottom = Dimens.PaddingSmall),
                                horizontalArrangement = Arrangement.Start
                            ) {
                                Button(
                                    elevation = ButtonDefaults.buttonElevation(Dimens.CardElevation),
                                    colors = ButtonDefaults.buttonColors(containerColor = colorResource(id = R.color.primaryColor)),
                                    onClick = {
                                        navController.navigate("cityInputScreen")
                                    }
                                ) {
                                    Text(
                                        text = "Find Another City Weather",
                                        color = colorResource(id = R.color.textPrimary),
                                        fontWeight = FontWeight.Bold,
                                        fontSize = Dimens.FontSizeMedium
                                    )
                                }
                            }
                            Text(
                                text = WeatherFormatter.formatTime(weather?.localTime ?: ""),
                                color = colorResource(id = R.color.timeColor),
                                fontSize = Dimens.FontSizeExtraLarge,
                                modifier = Modifier.padding(vertical = Dimens.PaddingSmall)
                            )
                            weather?.let {
                                WeatherInfoCard(it)
                                AdditionalWeatherInfo(it)
                            }
                            Button(
                                colors = ButtonDefaults.buttonColors(containerColor = colorResource(id = R.color.primaryColor)),
                                elevation = ButtonDefaults.buttonElevation(Dimens.CardElevation),
                                onClick = {
                                    navController.navigate("forecastScreen/$city")
                                },
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(vertical = Dimens.PaddingMedium)
                            ) {
                                Text(
                                    text = "See Next 5 Days Weather",
                                    color = colorResource(id = R.color.textPrimary),
                                    fontWeight = FontWeight.Bold,
                                    fontSize = Dimens.FontSizeMedium
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
