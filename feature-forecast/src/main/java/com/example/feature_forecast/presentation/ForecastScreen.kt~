package com.example.feature_forecast.presentation


import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.text.font.FontWeight
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import coil.compose.AsyncImage
import com.example.core.utils.NetworkUtils
import com.example.core.utils.WeatherFormatter
import com.example.feature_forecast.R
import com.example.feature_forecast.ui.Dimens
import com.google.accompanist.swiperefresh.SwipeRefresh
import com.google.accompanist.swiperefresh.rememberSwipeRefreshState

/**
 * Main screen for displaying the weather forecast for a given city.
 * @param city The city name to fetch the forecast for.
 * @param navController Navigation controller to handle back navigation.
 * @param viewModel ViewModel for managing forecast data and state.
 */
@Composable
fun ForecastScreen(
    city: String,
    navController: NavController,
    viewModel: ForecastViewModel = hiltViewModel()
) {
    val state by viewModel.state.collectAsState()
    val context = LocalContext.current
    val isConnected by NetworkUtils.isConnected.collectAsState()
    val snackbarHostState = remember { SnackbarHostState() }
    val swipeRefreshState = rememberSwipeRefreshState(isRefreshing = state.isLoading)

    // Handle network connectivity changes
    LaunchedEffect(isConnected) {
        if (isConnected) {
            viewModel.processIntent(ForecastIntent.LoadForecast(city))
        } else {
            snackbarHostState.showSnackbar("Check your internet connection")
        }
    }

    Scaffold(
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(Dimens.PaddingMedium),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            BackButton(navController = navController)
            SwipeRefresh(
                state = swipeRefreshState,
                onRefresh = { viewModel.processIntent(ForecastIntent.LoadForecast(city)) }
            ) {
                ForecastContent(state = state)
            }
        }
    }
}

/**
 * Composable for the back button to navigate to the previous screen.
 */
@Composable
private fun BackButton(navController: NavController) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = Dimens.PaddingSmall),
        horizontalArrangement = Arrangement.Start
    ) {
        Button(
            elevation = ButtonDefaults.buttonElevation(Dimens.CardElevation),
            colors = ButtonDefaults.buttonColors(containerColor = colorResource(id = R.color.primaryColor)),
            onClick = { navController.popBackStack() }
        ) {
            Text(
                text = "Back to Current Weather",
                color = colorResource(id = R.color.textPrimary),
                fontWeight = FontWeight.Bold,
                fontSize = Dimens.FontSizeMedium
            )
        }
    }
}

/**
 * Composable for displaying the forecast content based on the state.
 */
@Composable
private fun ForecastContent(state: ForecastState) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.TopCenter
    ) {
        when {
            state.isLoading -> {
                CircularProgressIndicator(color = colorResource(id = R.color.textPrimary))
            }
            state.forecast != null -> {
                if (state.forecast!!.forecastDays.isEmpty()) {
                    EmptyStateMessage()
                } else {
                    ForecastList(forecastDays = state.forecast!!.forecastDays)
                }
            }
            state.error != null -> {
                ErrorMessage(error = state.error)
            }
        }
    }
}

/**
 * Composable for displaying the forecast list.
 */
@Composable
private fun ForecastList(forecastDays: List<ForecastDay>) {
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        contentPadding = PaddingValues(Dimens.PaddingMedium)
    ) {
        items(forecastDays) { day ->
            ForecastCard(day = day)
        }
    }
}

/**
 * Composable for displaying a single forecast day card.
 */
@Composable
private fun ForecastCard(day: ForecastDay) {
    val dayName = WeatherFormatter.formatDayName(day.date)
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = Dimens.PaddingSmall),
        shape = RoundedCornerShape(Dimens.PaddingMedium),
        elevation = CardDefaults.cardElevation(Dimens.CardElevation),
        colors = CardDefaults.cardColors(containerColor = colorResource(id = R.color.primaryColor))
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(Dimens.PaddingMedium),
            verticalAlignment = Alignment.CenterVertically
        ) {
            AsyncImage(
                model = WeatherFormatter.getWeatherIconUrl(day.conditionIcon),
                contentDescription = "Weather Icon",
                modifier = Modifier.size(Dimens.IconSize)
            )
            Spacer(modifier = Modifier.width(Dimens.PaddingMedium))
            Column {
                Text(
                    text = dayName,
                    color = colorResource(id = R.color.textPrimary),
                    fontSize = Dimens.FontSizeExtraLarge,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = day.conditionText,
                    color = colorResource(id = R.color.timeColor),
                    fontSize = Dimens.FontSizeLarge
                )
            }
            Spacer(modifier = Modifier.weight(1f))
            Text(
                text = WeatherFormatter.formatMinMaxTemp(day.minTemp, day.maxTemp),
                color = colorResource(id = R.color.textPrimary),
                fontSize = Dimens.FontSizeExtraLarge,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

/**
 * Composable for displaying an error message.
 */
@Composable
private fun ErrorMessage(error: String?) {
    Text(
        text = error ?: "Unknown error",
        color = Color.Red, // Replace with R.color.errorColor if defined
        fontSize = Dimens.FontSizeLarge
    )
}

/**
 * Composable for displaying an empty state message.
 */
@Composable
private fun EmptyStateMessage() {
    Text(
        text = "No forecast data available",
        color = colorResource(id = R.color.textPrimary),
        fontSize = Dimens.FontSizeLarge
    )
}